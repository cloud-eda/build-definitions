apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: docker-build 
  labels:
    "pipelines.openshift.io/used-by" : "build-cloud"
    "pipelines.openshift.io/runtime" : "generic"
    "pipelines.openshift.io/strategy" : "docker" 
spec:
  params:
    - description: 'Source Repository URL'
      name: git-url
      type: string
    - description: 'Revision of the Source Repository'
      name: revision
      type: string
      default: main
    - description: 'Fully Qualified Output Image'
      name: output-image
      type: string
    - description: The path to your source code
      name: path-context 
      type: string
      default: .
    - description: Path to the Dockerfile
      name: dockerfile
      type: string
      default: Dockerfile
  tasks:
    - name: appstudio-init
      params: 
        - name: image-url 
          value: "$(params.output-image)"
        - name: pipeline-run-name
          value: "$(context.pipelineRun.name)"
        - name: pipeline-run-namespace
          value: "$(context.pipelineRun.namespace)"
      taskRef:
        name: init
      workspaces:
        - name: source
          workspace: workspace  
        - name: registry-auth
          workspace: registry-auth  
        - name: git-auth 
          workspace: git-auth  
    - name: clone-repository      
      when:
      - input: $(tasks.appstudio-init.results.exists) 
        operator: in
        values: ["false"]
      runAfter:
        - appstudio-init 
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: "$(params.revision)"
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
    - name: appstudio-configure-build 
      runAfter:
        - clone-repository
      when:
      - input: $(tasks.appstudio-init.results.exists) 
        operator: in
        values: ["false"] 
      taskRef:
        name: configure-build
      workspaces:
        - name: source
          workspace: workspace  
        - name: registry-auth
          workspace: registry-auth  
        - name: git-auth 
          workspace: git-auth   
    - name: build-container 
      params:
        - name: IMAGE
          value: >-
            $(params.output-image)
        - name: BUILDER_IMAGE
          value: >-
            registry.redhat.io/rhel8/buildah@sha256:99cae35f40c7ec050fed3765b2b27e0b8bbea2aa2da7c16408e2ca13c60ff8ee
        - name: STORAGE_DRIVER
          value: vfs
        - name: DOCKERFILE
          value: ./Dockerfile
        - name: CONTEXT
          value: $(params.path-context)
        - name: TLSVERIFY
          value: 'true'
        - name: FORMAT
          value: oci
        - name: BUILD_EXTRA_ARGS
          value: "$(tasks.appstudio-configure-build.results.buildah-auth-param)"
        - name: PUSH_EXTRA_ARGS
          value: "$(tasks.appstudio-configure-build.results.buildah-auth-param)"
      runAfter:
        - appstudio-configure-build 
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
        - name: source
          workspace: workspace
    - name: show-summary
      runAfter:
        - build-container 
      taskRef:
        name: summary
      params: 
      - name: pipeline-run-name
        value: "$(context.pipelineRun.name)"
      - name: git-url
        value: "$(params.git-url)"
      - name: image-url
        value: $(params.output-image)   
    - name: skip-rebuild-summary  
      when:
      - input: $(tasks.appstudio-init.results.exists) 
        operator: in
        values: ["true"]  
      runAfter:
        - appstudio-init
      taskRef:
        name: summary
      params:
      - name: pipeline-run-name
        value: "$(context.pipelineRun.name)"
      - name: git-url
        value: "$(params.git-url)"
      - name: image-url
        value: $(params.output-image)   
  workspaces:
    - name: workspace
    - name: registry-auth
      optional: true
    - name: git-auth 
      optional: true
